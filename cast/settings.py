"""
Django settings for cast project.

Generated by 'django-admin startproject' using Django 4.2.7.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
import os

from celery.schedules import crontab
from dotenv import load_dotenv
from os.path import join, dirname
from datetime import timedelta

dotenv_path = join(dirname(__file__), '.env')
load_dotenv(dotenv_path)

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

HOST_IP = os.environ.get('HOST_IP', 'localhost')
HOST_NAME = os.environ.get('HOST_NAME', 'coinlab.chesapeakebay.app')
DEV_HOST_NAME = os.environ.get('DEV_HOST_NAME', 'dev-coinlabchesapeakebay.app')
DB_ENGINE = os.environ.get('DB_ENGINE', 'django.db.backends.postgresql')
DB_HOST = os.environ.get('DB_HOST', 'localhost')
DB_PORT = os.environ.get('DB_PORT', '5432')
POSTGRES_DB = os.environ.get('POSTGRES_DB', 'cast_db')
POSTGRES_USER = os.environ.get('POSTGRES_USER', 'postgres')
POSTGRES_PASSWORD = os.environ.get('POSTGRES_PASSWORD', 'mysecretpassword')
DJ_DEBUG=  bool(os.environ.get('DJ_DEBUG', 'True'))
DJ_SECRET_KEY =  os.environ.get('DJ_SECRET_KEY', 'django-insecure-hs6j037urx7iav+7#10%-vu4l4f5@@-1_zo)oft3g8$vf2$jmp')

EMAIL_HOST = os.environ.get('EMAIL_HOST', 'posteo.de')
EMAIL_HOST_USER = os.environ.get('EMAIL_HOST_USER', 'gtoscano@posteo.net')
EMAIL_HOST_PASSWORD = os.environ.get('EMAIL_HOST_PASSWORD', '')
DEFAULT_FROM_EMAIL = os.environ.get('DEFAULT_FROM_EMAIL', EMAIL_HOST_USER) 
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

REDIS_HOST =  os.environ.get('REDIS_HOST','127.0.0.1')
REDIS_PORT =  os.environ.get('REDIS_PORT', '6379')
REDIS_DB_CELERY =  os.environ.get('REDIS_DB_CELERY','1')
REDIS_DB_RESULT=  os.environ.get('REDIS_DB_RESULT','1')
REDIS_DB_CACHE =  os.environ.get('REDIS_DB_CACHE', '3')

CKEDITOR_BASEPATH = "/static/ckeditor/ckeditor/"
CKEDITOR_UPLOAD_PATH = "uploads/"
CKEDITOR_IMAGE_BACKEND= 'ckeditor_uploader.backends.PillowBackend'

BOKEH_URL = 'https://bokeh.toscano.mx/multiplotall'
# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-2ooy(!-px2q711qm#ivj7g8v+7*7e+j(xp9%ub$&@bk)x$9v6s'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = [
    '127.0.0.1', 
    HOST_IP, 
    'localhost', 
    HOST_NAME,
    DEV_HOST_NAME
]


CORS_ORIGIN_WHITELIST = [
    '127.0.0.1:8000',
    'http://localhost:8000',
    'https://localhost:8000',
    f'http://{HOST_IP}:8000',
    f'https://{HOST_IP}:8000',
    f'http://{HOST_NAME}',
    f'https://{HOST_NAME}',
]


CORS_ALLOWED_ORIGINS = [
    'http://127.0.0.1:8000',
    'https://127.0.0.1:8000',
    'http://localhost:8000',
    'https://localhost:8000',
    f'http://{HOST_IP}:8000',
    f'https://{HOST_IP}:8000',
    f'http://{HOST_NAME}',
    f'https://{HOST_NAME}',
]

CSRF_TRUSTED_ORIGINS = [
    'http://127.0.0.1:8000',
    'https://127.0.0.1:8000',
    f'http://{HOST_IP}:8000',
    f'https://{HOST_IP}:8000',
    'http://localhost:8000',
    'https://localhost:8000',
    f'http://{HOST_NAME}',
    f'https://{HOST_NAME}',
]


SITE_ID = 1 
SECURE_SSL_REDIRECT = os.environ.get('SECURE_SSL_REDIRECT', 'False') == 'True'
##CSRF_COOKIE_SECURE = True
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')

# Application definition

customColorPalette = [
        {
            'color': 'hsl(4, 90%, 58%)',
            'label': 'Red'
        },
        {
            'color': 'hsl(340, 82%, 52%)',
            'label': 'Pink'
        },
        {
            'color': 'hsl(291, 64%, 42%)',
            'label': 'Purple'
        },
        {
            'color': 'hsl(262, 52%, 47%)',
            'label': 'Deep Purple'
        },
        {
            'color': 'hsl(231, 48%, 48%)',
            'label': 'Indigo'
        },
        {
            'color': 'hsl(207, 90%, 54%)',
            'label': 'Blue'
        },
    ]

CKEDITOR_5_CONFIGS = {
    'default': {
        'toolbar': { 'items':[
            'undo', 'redo',
            '|', 'heading',
            {
                'label': 'Fonts',
                'withText': True,
                'items': [ 'fontSize', 'fontFamily', 'fontColor', 'fontBackgroundColor' ]
            },
            {'name': 'paragraph', 'label': 'Paragraph', 'withText': True,
                'items': ['NumberedList', 'BulletedList', 'TodoList', '-', 'Outdent', 'Indent', '-', 'Blockquote', '-', 'alignment',]},
            {'name': 'image', 'label': 'Image', 'withText': True,
                'items': ['imageTextAlternative', 'imageStyle:alignLeft', 'imageStyle:side', 'imageStyle:alignRight', 'imageStyle:alignCenter', 'imageStyle:side', 'linkImage']},
                '|', 'bold', 'italic', 'link', 'strikethrough', 'subscript', 'superscript', 
                '|', 'blockQuote', 'code', 'codeBlock', 'sourceEditing',
                '|', 'mediaEmbed','uploadImage', 
                '|', 'insertTable', 'tableColumn', 'tableRow', 'mergeTableCells'
             ], 
                'shouldNotGroupWhenFull': True,
        },
        'image': {
            'toolbar': [ 'imageTextAlternative', 'imageStyle:alignLeft', 'imageStyle:side', 'imageStyle:alignRight', 'imageStyle:alignCenter', 'imageStyle:side', 'linkImage'],
            'styles': [
                'alignLeft', 'alignRight', 'alignCenter', 'side'
            ]
        },
        'table': {
            'contentToolbar': [ 'tableColumn', 'tableRow', 'mergeTableCells',
            'tableProperties', 'tableCellProperties' ],
            'tableProperties': {
                'borderColors': customColorPalette,
                'backgroundColors': customColorPalette
            },
            'tableCellProperties': {
                'borderColors': customColorPalette,
                'backgroundColors': customColorPalette
            }
        },

    },
    'plugins': {
        'table': {
            'contentToolbar': [ 'tableColumn', 'tableRow', 'mergeTableCells',
            'tableProperties', 'tableCellProperties' ],
            'tableProperties': {
                'borderColors': customColorPalette,
                'backgroundColors': customColorPalette
            },
            'tableCellProperties': {
                'borderColors': customColorPalette,
                'backgroundColors': customColorPalette
            }
        },
    },

    'list': {
        'properties': {
            'styles': 'true',
            'startIndex': 'true',
            'reversed': 'true',
        }
    },
    
}


INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',
    'django.contrib.humanize',
    'template_partials',
    'widget_tweaks',
    'django_extensions',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.apple',
    'allauth.socialaccount.providers.github',
    'allauth.socialaccount.providers.google',
    'django_tables2',
    'django_filters',
    'corsheaders',
    'rest_framework',
    'djoser',
    'debug_toolbar',
    'api',
    'django_select2',
    'crispy_forms',
    'crispy_daisyui',
    'crispy_tailwind',
    'crispy_bootstrap5',
    'crispy_bulma',
    "bootstrap_datepicker_plus",
    'django_celery_beat',
    'django_celery_results',
    'django_ckeditor_5',
    'core',
    'rag',
    'scenario',
    'execution',
    'solution',
    'step_1',
    'step_2',
    'step_3',
    'step_4',
    'step_5',
    'step_6',
    'optimization',
    'decision_making',
    'templatetags',
    'sslserver',
    'emails',

]
CRISPY_ALLOWED_TEMPLATE_PACKS = [
    "daisyui",
    "tailwind",
    "bulma",
    "bootstrap5",
]
CRISPY_TEMPLATE_PACK = "bootstrap5"
MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'debug_toolbar.middleware.DebugToolbarMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'allauth.account.middleware.AccountMiddleware',
]


ROOT_URLCONF = 'cast.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

AUTHENTICATION_BACKENDS = [
    # Needed to login by username in Django admin, regardless of `allauth`
    'django.contrib.auth.backends.ModelBackend',

    # `allauth` specific authentication methods, such as login by email
    'allauth.account.auth_backends.AuthenticationBackend',
]


#SOCIALACCOUNT_PROVIDERS = {
#    'google': {
#        'APP': {
#            'client_id': 'your-client-id',
#            'secret': 'your-client-secret',
#            'key': ''
#        }
#    }
#}

WSGI_APPLICATION = 'cast.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES2 = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
        'OPTIONS': {
            'timeout': 20,  # Increase timeout to 20 seconds
        },
    }
}

DATABASES = {
    'default': {
        'ENGINE': DB_ENGINE,
        'NAME': POSTGRES_DB,
        'USER': POSTGRES_USER, 
        'PASSWORD': POSTGRES_PASSWORD,
        'HOST': DB_HOST,  # Set to the address of your PostgreSQL database
        'PORT': DB_PORT,       # The default port PostgreSQL listens on
    }
}
# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.postgresql',
#         'NAME': 'your_db_name',
#         'USER': 'postgres',
#         'PASSWORD': 'your_password',  # Make sure this is correct
#         'HOST': '127.0.0.1',
#         'PORT': '5432',
#     }
# }

print(f"Postgres Host: {DB_HOST}")
print(f"Postgres Password: {POSTGRES_PASSWORD}")



# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'America/New_York'

USE_I18N = True

USE_TZ = True

CELERY_TIMEZONE = 'America/New_York'


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'static')
STATICFILES_DIRS = [ os.path.join(BASE_DIR, 'static_files/'),  ]

# settings.py

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_USE_SSL = True
EMAIL_PORT = 465
AUTH_USER_MODEL = 'core.User'

CELERY_BROKER_URL = f'redis://{REDIS_HOST}:{REDIS_PORT}/{REDIS_DB_CELERY}'
CELERY_RESULT_BACKEND = f'redis://{REDIS_HOST}:{REDIS_PORT}/{REDIS_DB_RESULT}'


CACHES = {

    'default': {
        'BACKEND': 'django_redis.cache.RedisCache',
        'LOCATION': 'redis://{}:{}/{}'.format(REDIS_HOST, REDIS_PORT, REDIS_DB_CACHE), 
        #'LOCATION': 'redis://redis:6379/20',
        'TIMEOUT': 10 * 60,
        'OPTIONS': {
            'CLIENT_CLASS': 'django_redis.client.DefaultClient',
        }
    },
    "select2": {
        "BACKEND": "django_redis.cache.RedisCache",
        'LOCATION': 'redis://{}:{}/{}'.format(REDIS_HOST, REDIS_PORT, REDIS_DB_CACHE),
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        }
    }
}

CELERY_BEAT_SCHEDULE = {
    #'send_emails': {
    #    'task': 'emails.tasks.send_emails',
    #    'schedule': crontab(minute='*/1'),
    #    'args': [],
    #},
    'send_base_scenarios': {
        'task': 'core.tasks.send_base_scenarios',
        'schedule': crontab(minute='*/1'),
        'args': [],
    },
}

# Tell select2 which cache configuration to use:
SELECT2_CACHE_BACKEND = "select2"


# Use email authentication instead of username authentication
ACCOUNT_AUTHENTICATION_METHOD = 'email'

# Make email required and unique
ACCOUNT_UNIQUE_EMAIL = True

# Optionally, remove the username field
#ACCOUNT_USER_MODEL_USERNAME_FIELD = None


# Use email as the primary identifier
ACCOUNT_USER_MODEL_EMAIL_FIELD = 'email'

# If you don't want to use the username field at all
ACCOUNT_USERNAME_REQUIRED = False
ACCOUNT_EMAIL_CONFIRMATION_EXPIRE_DAYS =1
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_EMAIL_VERIFICATION = "mandatory"# Options: 'mandatory', 'optional', or 'none'
ACCOUNT_LOGOUT_REDIRECT_URL ='/'
LOGIN_REDIRECT_URL = '/'
# the following were deprecated
# ACCOUNT_LOGIN_ATTEMPTS_LIMIT = 5
# ACCOUNT_LOGIN_ATTEMPTS_TIMEOUT = 86400 # 1 day in seconds
ACCOUNT_RATE_LIMITS = {
    'login_failed': '5/300s',  # Replace '5/300s' with the desired values
}



REST_FRAMEWORK = {
    'COERCE_DECIMAL_TO_STRING': False,
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),

}

DJOSER = {
    'SERIALIZERS': {
        'user_create': 'core.serializers.UserCreateSerializer',
        'current_user': 'core.serializers.UserSerializer',
    }
}

SIMPLE_JWT = {
    'AUTH_HEADER_TYPES': ('JWT',),
    'ACCESS_TOKEN_LIFETIME': timedelta(days=30)
}


